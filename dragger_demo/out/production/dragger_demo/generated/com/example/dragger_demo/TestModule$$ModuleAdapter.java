// Code generated by dagger-compiler.  Do not edit.
package com.example.dragger_demo;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class TestModule$$ModuleAdapter extends ModuleAdapter<TestModule> {
  private static final String[] INJECTS = { "members/com.example.dragger_demo.MyActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public TestModule$$ModuleAdapter() {
    super(com.example.dragger_demo.TestModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, TestModule module) {
    bindings.contributeProvidesBinding("android.content.Context", new ApplicatoinContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.example.dragger_demo.Drink", new ProvideDrinkProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.example.dragger_demo.Pump", new ProvidePumpProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.example.dragger_demo.Heater", new ProvideHeaterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ApplicatoinContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final TestModule module;

    public ApplicatoinContextProvidesAdapter(TestModule module) {
      super("android.content.Context", IS_SINGLETON, "com.example.dragger_demo.TestModule", "applicatoinContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.applicatoinContext();
    }
  }

  /**
   * A {@code Binding<com.example.dragger_demo.Drink>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.example.dragger_demo.Drink} and its
   * dependencies.
   *
   * Being a {@code Provider<com.example.dragger_demo.Drink>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideDrinkProvidesAdapter extends ProvidesBinding<Drink>
      implements Provider<Drink> {
    private final TestModule module;
    private Binding<PeopleDrink> drink;

    public ProvideDrinkProvidesAdapter(TestModule module) {
      super("com.example.dragger_demo.Drink", IS_SINGLETON, "com.example.dragger_demo.TestModule", "provideDrink");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      drink = (Binding<PeopleDrink>) linker.requestBinding("com.example.dragger_demo.PeopleDrink", TestModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(drink);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.dragger_demo.Drink>}.
     */
    @Override
    public Drink get() {
      return module.provideDrink(drink.get());
    }
  }

  /**
   * A {@code Binding<com.example.dragger_demo.Pump>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.example.dragger_demo.Pump} and its
   * dependencies.
   *
   * Being a {@code Provider<com.example.dragger_demo.Pump>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePumpProvidesAdapter extends ProvidesBinding<Pump>
      implements Provider<Pump> {
    private final TestModule module;
    private Binding<Thermosiphon> pump;

    public ProvidePumpProvidesAdapter(TestModule module) {
      super("com.example.dragger_demo.Pump", IS_SINGLETON, "com.example.dragger_demo.TestModule", "providePump");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      pump = (Binding<Thermosiphon>) linker.requestBinding("com.example.dragger_demo.Thermosiphon", TestModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(pump);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.dragger_demo.Pump>}.
     */
    @Override
    public Pump get() {
      return module.providePump(pump.get());
    }
  }

  /**
   * A {@code Binding<com.example.dragger_demo.Heater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.example.dragger_demo.Heater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHeaterProvidesAdapter extends ProvidesBinding<Heater>
      implements Provider<Heater> {
    private final TestModule module;

    public ProvideHeaterProvidesAdapter(TestModule module) {
      super("com.example.dragger_demo.Heater", IS_SINGLETON, "com.example.dragger_demo.TestModule", "provideHeater");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.dragger_demo.Heater>}.
     */
    @Override
    public Heater get() {
      return module.provideHeater();
    }
  }
}
